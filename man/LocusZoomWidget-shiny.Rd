% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LocusZoomWidget.R
\name{LocusZoomWidget}
\alias{LocusZoomWidget}
\alias{LocusZoomWidget-shiny}
\alias{LocusZoomWidgetOutput}
\alias{renderLocusZoomWidget}
\title{Create a locusZoom Plot}
\usage{
LocusZoomWidget(
  x,
  chr,
  bpstart,
  bpend,
  genome_build = "GRCh37",
  main_title = "Custom Locuszoom",
  bed = NULL,
  width = NULL,
  height = NULL,
  elementId = NULL
)

LocusZoomWidgetOutput(outputId, width = "100\%", height = "400px")

renderLocusZoomWidget(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{x}{could be either a \code{character} or \code{data.frame} or \code{tibble} object that
can be serialize to JSON format.
In case if \code{x} is a character it should contain a valid REST API endpoint
where to retrieve json data from a summary statistic .
If \code{x} is a \code{data.frame} it will be Jsonize using \link[rjson:toJSON]{toJSON()}
function. The \code{data.frame} \strong{must} contain the following \strong{named} columns:

\strong{Mandatory}
\itemize{
\item \code{analysis}: a custom string/numeric value
\item \code{variant} : format "{chr}:{pos}_{ref}/{alt}, it is used to look for LD
\item \code{chromosome}: chromosome number
\item \code{position}: position of the variant in BP
\item \code{log_pvalue}: -log10(p_value)
}

\strong{Optional}
\itemize{
\item \code{ref_allele}: reference allele
\item \code{p_value}: raw p_value
\item \code{beta}: effect of the allele either beta or OR
\item \code{alt_allele}: alternate allele
\item \code{ref_allele_freq}: frequency of the ref_allele
\item \code{score_test_stat}: z-score
\item \code{se}: standar deviation of the effect beta/OR
}

See \url{https://portaldev.sph.umich.edu/docs/api/v1/?shell#single-variant-statistics}
for further details on the format of the \code{data.frame} columns or either of
the JSON blob returned by the custom REST API endpoint.}

\item{chr}{either a \code{character} or \code{integer} for the chromosome where to filter
for the variant}

\item{bpstart}{integer, plot variants located in chromosome \code{chr} where \code{bp>=bpstart}}

\item{bpend}{integer, plot variants located in chromosome \code{chr} where \code{bp<=bpend}}

\item{genome_build}{character specifying the genome build of the input data.
Should be one of "GRCh37" (default) or "GRCh38" \strong{case-sensitive}. The genome build version
is used to merge with LD, recombination and gene position data.}

\item{main_title}{character, title of the locuszoom plot}

\item{bed}{data.frame, default is NULL, if provided an interval custom annotation track is added to the plot}

\item{width, height}{Must be a valid CSS unit (like \code{'100\%'},
\code{'400px'}, \code{'auto'}) or a number, which will be coerced to a
string and have \code{'px'} appended.}

\item{elementId}{character, element identifier where the plot should be inserted, do not change it, it will be handled by Rmd or shiny}

\item{outputId}{output variable to read from}

\item{expr}{An expression that generates a LocusZoomWidget}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}
}
\value{
HTLM/Javascript to render in a shinyapp
}
\description{
This function implements a HTML widget for the integration of LocusZoom plots
into a shinyapp. It can work either with a JSON blob input or a custom REST API server

Output and render functions for using LocusZoomWidget within Shiny
applications and interactive Rmd documents.
}
\details{
In case a \code{url} of a REST API is given as input, the API should accept
GET requests. The base url of the API should accept 3 parameter, namely \code{chr}
\code{start} and \code{end}. Suppose the base \code{url} \verb{http://myapi.com/api/v1}, the request
should work with the following command:

\verb{curl -G  http://myapi.com/api/v1/?chr=1&start=2088708&end=2135898}

\strong{NB} Provide the API url without the trailing slash.

Bed-like data.frame provided through the \code{bed} parameter should have a minimun of 4 columns named
exactly and ordered as follows:
\code{chromosome}, \code{start}, \code{end} and \code{state_name}
}
\examples{

\dontrun{
jsonfile <- system.file("data/td2t_10_114550452-115067678.json", package="shinylocuszoom")
jsondata <- fromJSON(file=jsonfile)
intervfile <- system.file("data/interval_td2t_10_114550452-115067678.json", package="shinylocuszoom")
intervdata <- fromJSON(file=intervfile)

LocusZoomWidget(
 jsondata[["data"]],
 chr = 10,
 bpstart = 114550452,
 bpend = 115067678,
 genome_build = "GRCh37",
 main_title = "TD2 association",
 bed=intervdata[["data"]])


# In the server.R:

output$locuszoom <- renderLocusZoomWidget({

  x <- get_mydata(
    chr = input$chr,
    bpstart = input$bpstart,
    bpend = input$bpend)

  # Using JSON blob
  LocusZoomWidget(x,
                  chr = input$chr,
                  bpstart = input$bpstart,
                  bpend = input$bpend,
  )
  # Using API url
  url <- "http://myapi.com/api/v1/sumstat"
  LocusZoomWidget(url,
                  chr = input$chr,
                  bpstart = input$bpstart,
                  bpend = input$bpend,
  )
})

# In the ui.R
ui <- fluidPage(

# Application title
titlePanel("Locus zoom test"),

sidebarLayout(
  sidebarPanel(
    selectInput(
      inputId = "chr",
      label = "Chromosome",
      choices = 1:22,
      selected = 1
    ),
    numericInput(
      inputId = "bpstart",
      label = "Bp from",
      value = 0
    ),
    numericInput(
      inputId = "bpend",
      label = "Bp to",
      value = 0
     )
  ),

  mainPanel(
     LocusZoomWidgetOutput("locuszoom")
   )
 )
)
}
}
